@model ProjectFormViewModel

<div class="row">

    @Html.Partial(ProjectsView.SideMenuPartial)

    <nav class="hoverable-area col-11">
        <div class="hidden-menu nav nav-tabs small" id="nav-tab" role="tablist">
            <a class="nav-item nav-link active" id="nav-general-tab" data-toggle="tab" href="#nav-general-content" role="tab" aria-controls="nav-general-content" aria-selected="true">GENERAL</a>
            <a class="nav-item nav-link" id="nav-users-tab" data-toggle="tab" href="#nav-users-content" role="tab" aria-controls="nav-users-content" aria-selected="false">USERS</a>
            <a class="nav-item nav-link" id="nav-boarding-tab" data-toggle="tab" href="#nav-boarding-content" role="tab" aria-controls="nav-boarding-content" aria-selected="false">BOARDING</a>
            <a class="nav-item nav-link" id="nav-software-tab" data-toggle="tab" href="#nav-software-content" role="tab" aria-controls="nav-software-content" aria-selected="false">SOFTWARE</a>
            <a class="nav-item nav-link" id="nav-lockbox-tab" data-toggle="tab" href="#nav-lockbox" role="tab" aria-controls="nav-lockbox" aria-selected="false">LOCKBOX</a>
            <a class="nav-item nav-link" id="nav-ach-tab" data-toggle="tab" href="#nav-ach" role="tab" aria-controls="nav-ach" aria-selected="false">ACH</a>
            <a class="nav-item nav-link" id="nav-system-tab" data-toggle="tab" href="#nav-system" role="tab" aria-controls="nav-system" aria-selected="false">SYSTEM</a>
            <a class="nav-item nav-link" id="nav-accounts-tab" data-toggle="tab" href="#nav-accounts" role="tab" aria-controls="nav-accounts" aria-selected="false">ACCOUNTS / HOA DDAS</a>
        </div>
    </nav>

    <nav class="navbar p-2">
        <button class="btn-img" id="search-box-toggle" type="button" data-toggle="slide-collapse-down" data-target="#search-widget" aria-controls="search-widget" aria-expanded="false" aria-label="Search">
            <img src="~/Content/Images/search-img.png" />
        </button>
        <div class="popup-control" id="search-widget">
            <input class="form-control full-width" id="project-search" type="text" placeholder="NAME / PMC ID" autocomplete="off">
        </div>
    </nav>

</div>


@using (Html.BeginForm(Model.CreateUpdateAction, ControllerName.Projects, FormMethod.Post, htmlAttributes: new
{
    id = "project-form-element",
    role = "form"
}))
{
    @Html.AntiForgeryToken()
    @*Html.ValidationSummary(true, "", new { @class = "text-danger" })*@
    @Html.HiddenFor(m => m.ID)

    <div class="row mb-2">
        <div class="col-1" style="margin-bottom: -10px; padding-top:5px;">
            <label class="text-muted">Name</label>
        </div>
        <div class="col-11 text-right">
            <span id="project-form-save-indicator" class="save-indicator badge-light">@Model.SaveIndicator</span>
            @Html.RoleBasedButton(" ", "submit", "btn-img btn-save-img")
            <button class="btn-img" type="button">
                <img class="icon-image" src="~/Content/Images/print-img.png" />
            </button>
            <button class="btn-img" type="button" data-toggle="modal" data-target="#close-dialog-modal">
                <img class="icon-image" src="~/Content/Images/btn-close-icon.png" />
            </button>
        </div>
    </div>

    @* Name fields shown on every tab *@
    <div class="row my-2 pb-1 border-bottom">
        <div class="col-4">
            <div class="row">
                @Html.LabelFor(m => m.ProjectName, new { @class = "col-2 form-label-indent" })
                <div class="col-10">
                    @Html.RoleBasedEditorFor(m => m.ProjectName, cssClass: "form-input")
                    @Html.ValidationMessageFor(m => m.ProjectName, "", new { @class = "form-error-msg" })
                </div>
            </div>
        </div>
        <div class="col-4">
            <div class="row">
                @Html.LabelFor(m => m.DBA, new { @class = "col-2 form-label-indent" })
                <div class="col-10">
                    @Html.RoleBasedEditorFor(m => m.DBA, cssClass: "form-input")
                    @Html.ValidationMessageFor(m => m.DBA, "", new { @class = "form-error-msg" })
                </div>
            </div>
        </div>
        <div class="col-4">
            <div class="row">
                @Html.LabelFor(m => m.OtherName, new { @class = "col-2 form-label-indent" })
                <div class="col-10">
                    @Html.RoleBasedEditorFor(m => m.OtherName, cssClass: "form-input")
                    @Html.ValidationMessageFor(m => m.OtherName, "", new { @class = "form-error-msg" })
                </div>
            </div>
        </div>
    </div>

    <div class="tab-content" id="nav-tabs-content">
        <div class="tab-pane fade show active" id="nav-general-content" role="tabpanel" aria-labelledby="nav-general-tab">
            @Html.Partial(ProjectsView.GeneralTabPartial)
        </div>
        <div class="tab-pane fade" id="nav-users-content" role="tabpanel" aria-labelledby="nav-users-tab">
            @Html.Partial(ProjectsView.UsersTabPartial)
        </div>
        <div class="tab-pane fade" id="nav-boarding-content" role="tabpanel" aria-labelledby="nav-boarding-tab">
            @Html.Partial(ProjectsView.BoardingTabPartial)
        </div>
        <div class="tab-pane fade" id="nav-software-content" role="tabpanel" aria-labelledby="nav-software-tab">
            @Html.Partial(ProjectsView.SoftwareTabPartial)
        </div>
    </div>
}


@* div to render user form modal *@
<div id="user-form-location"></div>

@* div to render project note form modal *@
<div id="note-form-modal-location"></div>

@* div to render users email distribution lists modal *@
<div id="users-email-list-modal-location"></div>

@* div to render check scanner form modal *@
<div id="scanner-form-location"></div>

@* div to render delete confirmation dialog *@
<div id="confirm-delete-dialog-location"></div>

@* div to render project form close dialog modal *@
<div>
    @Html.Partial(ProjectsView.CloseDialogPartial)
</div>


<div class="screen-overlay"></div>

@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/ajaxhelper")
    @Scripts.Render("~/bundles/select2")

    <script>

        $(document).ready(function () {

            CrmApp.enableSelect2Plugin();

            // Projects search autocomplete
            $("#project-search").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: "/api/Projects",
                        method: "GET",
                        dataType: "json",
                        data: {
                            search: request.term
                        },
                        success: function (data) {
                            if (data.length > 0) {
                                response($.map(data, function (item) {
                                    return {
                                        label: item.name,
                                        value: item.id
                                    };
                                }));
                            } else {
                                response([{
                                    label: 'No results found',
                                    value: -1
                                }]);
                            }
                        },
                        error: function () {
                            handleAjaxError();
                        }
                    });
                },
                minLength: 2,
                select: function (event, ui) {
                    event.preventDefault();

                    if (ui.item.value === -1) {
                        $(this).val("");
                        //return false;
                    } else {
                        this.value = ui.item.label;
                        location.href = "/Projects/Edit/" + ui.item.value;
                    }
                }
            });


            $('[data-toggle="slide-collapse-right"]').on("click", function () {
                $toggleTarget = $($(this).data("target"));
                $toggleTarget.show("slide");

                $(".screen-overlay").fadeIn(500);
            });

            $('[data-toggle="slide-collapse-down"]').on("click", function () {
                $toggleTarget = $($(this).data("target"));
                $toggleTarget.show("blind", 250);
                //$toggleTarget.show("slide", { direction: "right" });

                $(".screen-overlay").fadeIn(250);
            });

            $(".screen-overlay").on("click", function (event) {
                $("#nav-side-menu").hide("slide");
                $("#project-search").val("");
                $("#search-widget").hide("blind", 250);
                //$("#search-widget").hide("slide", { direction: "right" });

                $(".screen-overlay").fadeOut(500);
            });

            // Users tab radio buttons filter
            $("input[name='user-filter-option']").change(function (e) {
                var $radios = $(this);
                var projectId = $radios.attr("data-projectId");
                var filterValue = $radios.val();

                var url = "/Projects/" + projectId + "/Users/Index";

                $.get(url, { filter: filterValue })
                    .done(function (responseData) {
                        $("#project-users-list").html(responseData);
                    })
                    .fail(function () {
                        handleAjaxError();
                    });
            });

            // TODO: Need better solution here
            var $saveIndicator = $("#project-form-save-indicator");
            if ($saveIndicator.text() == "SAVED") {
                $saveIndicator.removeClass("badge-light").addClass("badge-success");
            };

            // Reset save indicator on any form change
            $("#project-form-element").on("change", function () {
                if ($saveIndicator.text() == "SAVED") {
                    $saveIndicator.text("UNSAVED");
                    $saveIndicator.removeClass("badge-success").addClass("badge-light");
                };
            });

            CrmApp.toggleLockboxFieldsDisabled();

            CrmApp.setMailingAddressOnPhysicalChange("#Address", "#MailingAddress");
            CrmApp.setMailingAddressOnPhysicalChange("#City", "#MailingCity");
            CrmApp.setMailingAddressOnPhysicalChange("#State", "#MailingState");
            CrmApp.setMailingAddressOnPhysicalChange("#ZipCode", "#MailingZipCode");

            // Handle Same As Physical checkbox changes
            $("#MailingSameAsPhysical").on("change", function () {
                function setMailingOnCheckboxChange(checked, mailingElementId, physicalElementId) {
                    var $mailingElement = $(mailingElementId);

                    if (checked) {
                        $mailingElement.val($(physicalElementId).val());
                        $mailingElement.addClass("read-only");
                    } else {
                        $mailingElement.val("");
                        $mailingElement.removeClass("read-only");
                    }
                };

                setMailingOnCheckboxChange(this.checked, "#MailingAddress", "#Address");
                setMailingOnCheckboxChange(this.checked, "#MailingCity", "#City");
                setMailingOnCheckboxChange(this.checked, "#MailingState", "#State");
                setMailingOnCheckboxChange(this.checked, "#MailingZipCode", "#ZipCode");
            });

            CrmApp.setSameAsPhysicalCheckbox();
        });


        var CrmApp = CrmApp || {};

        // Enable select2 for dropdowns
        CrmApp.enableSelect2Plugin = function () {
            $("#Institution").select2();
            $("#OwnerID").select2();
            $("#AFPID").select2();
            $("#BoardingManagerID").select2();
            $("#LockboxStatus").select2();
            $("#LockboxSystem").select2({
                tags: true,
                insertTag: function (data, tag) {
                    data.push(tag);
                }
            });
            $("#Status").select2();
            $("#Software").select2({
                tags: true,
                insertTag: function (data, tag) {
                    data.push(tag);
                }
            });
            $("#MigratingToSoftware").select2();
            $("#XmlUsage").select2();
        };

        // Disable lockbox related fields when status is No Lockbox
        CrmApp.toggleLockboxFieldsDisabled = function () {
            function disableFields() {
                $("#LockboxSystem").attr("disabled", "disabled");
                $("#LockboxLiveDate").attr("disabled", "disabled");
            };

            function enableFields() {
                $("#LockboxSystem").removeAttr("disabled");
                $("#LockboxLiveDate").removeAttr("disabled");
            };

            var noLockbox = "No Lockbox";
            var $status = $("#LockboxStatus");

            if ($status.val() == noLockbox) {
                disableFields();
            }

            $("#LockboxStatus").on("change", function () {
                if (this.value == noLockbox) {
                    disableFields();
                } else {
                    enableFields();
                }
            });
        };

        // Handle physical address changes based on Same As Physical checkbox
        CrmApp.setMailingAddressOnPhysicalChange = function (physicalElementId, mailingElementId) {
            $(physicalElementId).on("change", function () {
                if ($("#MailingSameAsPhysical").is(":checked")) {
                    $(mailingElementId).val(this.value);
                }
            });
        };

        // Initial setting of Same As Physical checkbox value
        CrmApp.setSameAsPhysicalCheckbox = function () {
            var $sameAsPhysical = $("#MailingSameAsPhysical");

            if ($("#Address").val() !== $("#MailingAddress").val() ||
                $("#City").val() !== $("#MailingCity").val() ||
                $("#State").val() !== $("#MailingState").val() ||
                $("#ZipCode").val() !== $("#MailingZipCode").val()) {
                $sameAsPhysical.attr("checked", false);
            } else {
                $sameAsPhysical.attr("checked", true).trigger("change");
            }
        };

        function showModalTarget(modalId) {
            $modalTarget = $($(this).data("modal-target"));

            if ($modalTarget.length) {
                $modalTarget.modal("show");

                var $form = $modalTarget.find("form").first();
                if ($form.length) {
                    validatorParseForm($form);
                }
            } else {
                handleAjaxError();
            }
        };

        function hideModalTarget() {
            $modalTarget = $($(this).data("modal-target"));

            if ($modalTarget.length) {
                $modalTarget.modal("hide");
            } else {
                handleAjaxError();
            }
        };

        function emailListCopyToClipboard() {
            $("#users-email-list-textarea").select();
            document.execCommand("copy");
        };

        // Parse form for unobtrusive validation
        function validatorParseForm(form) {
            $.validator.unobtrusive.parse(form);
        };

        function handleAjaxError() {
            alert("An error occurred while processing your request");
        };

    </script>
}