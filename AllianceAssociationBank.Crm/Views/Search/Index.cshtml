@model SearchResultsPagedViewModel
@{
    ViewBag.Title = "Search Results";
}

<div class="row">

    <div class="col-1 p-0">
        <div class="float-left">
            @Html.Partial(SharedView.SideMenuPartial)
        </div>
    </div>

    <div class="col-1 offset-10 p-0">
        <div class="float-right">
            @Html.Partial(SharedView.SearchWidgetPartial)
        </div>
    </div>

</div>

<div class="row mt-4 py-2 border-bottom">

    <div class="col-2">
        <h5 class="font-weight-bold">Search Results</h5>
    </div>

    <div class="col-4 offset-2">
        @using (Html.BeginForm(SearchControllerAction.Results, ControllerName.Search, method: FormMethod.Get))
        {
            <div class="input-group">
                @Html.TextBox("term", Model.SearchTerm, new
                {
                    @class = "form-control",
                    placeholder = "Name / TIN / PMC ID",
                })
                <div class="input-group-append">
                    <button class="btn btn-primary" type="submit">SEARCH</button>
                </div>
            </div>
            @Html.ValidationMessageFor(m => m.SearchTerm, "", new { @class = "form-error-msg" })
        }
    </div>

</div>

<div id="search-results-content">
    <table class="table table-borderless table-fixed">
        <thead>
            <tr>
                <th scope="col" class="border-bottom border-top-0 table-row-30">
                    @Html.ActionLink("Legal Name", SearchControllerAction.Results, routeValues: new
                    {
                        term = Model.SearchTerm,
                        page = 1,
                        sort = Model.SortOrderParam
                    }, htmlAttributes: new { @class = "plain-link" })
                    <img class="sort-icon" src="~/Content/Images/sort-order-icon.png" />
                </th>
                <th scope="col" class="border-bottom border-top-0 table-row-20">
                    @Html.DisplayNameFor(m => m.Items.FirstOrDefault().DBA)
                </th>
                <th scope="col" class="border-bottom border-top-0 table-row-20">
                    Other Name
                </th>
                <th scope="col" class="border-bottom border-top-0 table-row-10">
                    @Html.DisplayNameFor(m => m.Items.FirstOrDefault().TIN)
                </th>
                <th scope="col" class="border-bottom border-top-0 table-row-10">
                    @Html.DisplayNameFor(m => m.Items.FirstOrDefault().Phone)
                </th>
                <th scope="col" class="border-bottom border-top-0 table-row-10">
                    @Html.DisplayNameFor(m => m.Items.FirstOrDefault().LockboxCMCID)
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var result in Model.Items)
            {
                <tr>
                    <td title="@result.ProjectName">
                        @Html.ActionLink((result.ProjectName ?? " "), ProjectsControllerAction.Edit, ControllerName.Projects, routeValues: new
                        {
                            id = result.ID
                        }, htmlAttributes: null)
                    </td>
                    <td title="@result.DBA">
                        @Html.DisplayFor(m => result.DBA)
                    </td>
                    <td title="@result.OtherName">
                        @Html.DisplayFor(m => result.OtherName)
                    </td>
                    <td title="@result.TIN">
                        @Html.DisplayFor(m => result.TIN)
                    </td>
                    <td title="@result.Phone">
                        @Html.DisplayFor(m => result.Phone)
                    </td>
                    <td title="@result.LockboxCMCID">
                        @Html.DisplayFor(m => result.LockboxCMCID)
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<div class="row pt-2">
    <div class="col">
        <nav aria-label="Search Pagination Nav">
            <ul class="pagination justify-content-center">

                <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
                    @Html.ActionLink("Previous", SearchControllerAction.Results, routeValues: new
               {
                   term = Model.SearchTerm,
                   page = Model.PreviousPageNumber,
                   sort = Model.CurrentSort
               }, htmlAttributes: new
               {
                   @class = "page-link"
               })
                </li>
                @if (Model.ShowSecondPreviousPage)
                {
                    <li class="page-item">
                        @Html.ActionLink(Model.SecondPreviousPageNumber.ToString(), SearchControllerAction.Results, routeValues: new
                   {
                       term = Model.SearchTerm,
                       page = Model.SecondPreviousPageNumber,
                       sort = Model.CurrentSort
                   }, htmlAttributes: new
                   {
                       @class = "page-link"
                   })
                    </li>
                }
                @if (Model.HasPreviousPage)
                {
                    <li class="page-item">
                        @Html.ActionLink(Model.PreviousPageNumber.ToString(), SearchControllerAction.Results, routeValues: new
                   {
                       term = Model.SearchTerm,
                       page = Model.PreviousPageNumber,
                       sort = Model.CurrentSort
                   }, htmlAttributes: new
                   {
                       @class = "page-link"
                   })
                    </li>
                }
                <li class="page-item active">
                    <a class="page-link">@Model.PageNumber</a>
                </li>
                @if (Model.HasNextPage)
                {
                    <li class="page-item">
                        @Html.ActionLink(Model.NextPageNumber.ToString(), SearchControllerAction.Results, routeValues: new
                   {
                       term = Model.SearchTerm,
                       page = Model.NextPageNumber,
                       sort = Model.CurrentSort
                   }, htmlAttributes: new
                   {
                       @class = "page-link"
                   })
                    </li>
                }
                @if (Model.ShowSecondNextPage)
                {
                    <li class="page-item">
                        @Html.ActionLink(Model.SecondNextPageNumber.ToString(), SearchControllerAction.Results, routeValues: new
                   {
                       term = Model.SearchTerm,
                       page = Model.SecondNextPageNumber,
                       sort = Model.CurrentSort
                   }, htmlAttributes: new
                   {
                       @class = "page-link"
                   })
                    </li>
                }
                <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
                    @Html.ActionLink("Next", SearchControllerAction.Results, routeValues: new
               {
                   term = Model.SearchTerm,
                   page = Model.NextPageNumber,
                   sort = Model.CurrentSort
               }, htmlAttributes: new
               {
                   @class = "page-link"
               })
                </li>

            </ul>
        </nav>
    </div>
</div>


<div class="screen-overlay"></div>

@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")

    <script>

        $(document).ready(function () {

            // Projects search autocomplete
            $("#project-search").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: "/api/Projects",
                        method: "GET",
                        dataType: "json",
                        data: {
                            search: request.term
                        },
                        success: function (data) {
                            if (data.length > 0) {
                                response($.map(data, function (item) {
                                    return {
                                        label: item.name,
                                        value: item.id
                                    };
                                }));
                            } else {
                                response([{
                                    label: 'No results found',
                                    value: -1
                                }]);
                            }
                        },
                        error: function () {
                            handleAjaxError();
                            response([]);
                        }
                    });
                },
                minLength: 1,
                focus: function (event, ui) {
                    event.preventDefault();
                    //this.value = ui.item.label;
                },
                select: function (event, ui) {
                    event.preventDefault();

                    if (ui.item.value === -1) {
                        $(this).val("");
                    } else {
                        this.value = ui.item.label;
                        location.href = "/Projects/Edit/" + ui.item.value;
                    }
                }
            });

            // Redirect to Search Results page on Enter keypress
            $("#project-search").on("keypress", function (event) {
                if (event.which === 13 && this.value.length > 0) {
                    event.preventDefault();
                    location.href = "/Search/Results?term=" + this.value;
                }
            });

            $('[data-toggle="slide-collapse-right"]').on("click", function () {
                var $toggleTarget = $($(this).data("target"));
                $toggleTarget.show("slide");

                $(".screen-overlay").fadeIn(500);
            });

            $('[data-toggle="slide-collapse-down"]').on("click", function () {
                var $toggleTarget = $($(this).data("target"));
                $toggleTarget.show("blind", 250);

                $(".screen-overlay").fadeIn(250);
            });

            $(".screen-overlay").on("click", function (event) {
                $("#nav-side-menu").hide("slide");
                $("#project-search").val("");
                $("#search-widget").hide("blind", 250);

                $(".screen-overlay").fadeOut(500);
            });

        });

        function handleAjaxError() {
            alert("An error occurred while processing your request");
        };

    </script>
}